package agh.ii.prinjava.lab09.lst09_02;

import java.sql.*;

public class Main {
    private static final String dbURL = "jdbc:sqlite:lab09/datasources/lab09_sqlite.db";

    /**
     * Interface {@link Statement} is used for executing a static SQL statement and returning the results it produces.
     * By default, only one {@link ResultSet} object per {@code Statement} object can be open at the same time.
     * Therefore, if the reading of one {@code ResultSet} object is interleaved with the reading of another,
     * each must have been generated by different {@code Statement} objects.
     *
     * <p><i>Note</i>: all execution methods in the {@code Statement} interface implicitly close a current
     * {@code ResultSet} object of the statement if an open one exists.
     *
     * <p>Basic methods:
     * <ol>
     *     <li>{@link Statement#execute execute}: can be used for any SQL query/statement ({@code INSERT},
     *     {@code UPDATE}, {@code SELECT}, ...)
     *     <p>returns {@code boolean} (true if it was a SELECT query and false otherwise)</li>
     *     <li>{@link Statement#executeUpdate executeUpdate}: only for {@code INSERT}, {@code UPDATE}, {@code DELETE}
     *     <p>returns an {@code int} (the number of rows affected)</li>
     *     <li>{@link Statement#executeQuery executeQuery}: only for {@code SELECT}, returns {@link ResultSet}</li>
     * </ol>
     *
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Statement.html">Statement</a>
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/ResultSet.html">ResultSet</a>
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/javax/sql/RowSet.html">RowSet</a>
     */
    private static void demo1() {
        System.out.println("demo1...");
        final String productName = "product1";
        final int price = 5;
        try (Connection con = DriverManager.getConnection(dbURL);
             Statement stmt = con.createStatement()) {

            // It is very inconvenient to write statements with string concatenation
            stmt.executeUpdate("INSERT INTO products VALUES (null, '" + productName + "', " + price + ")");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Interface {@link PreparedStatement} represents a precompiled SQL statement that can then be used to efficiently
     * execute this statement multiple times.
     *
     * <p>Prepared statements provide the following benefits:
     * <ul>
     *     <li>make it easier to set SQL parameter values</li>
     *     <li>prevent against SQL injection attacks</li>
     *     <li>may improve application performance (an SQL statement is precompiled)</li>
     * </ul>
     *
     * <p><i>Note</i>: the setter methods ({@link PreparedStatement#setShort setShort},
     * {@link PreparedStatement#setString setString}, ...) for setting {@code IN} parameter values must specify types
     * that are compatible with the defined SQL type of the input parameter. For instance, if the {@code IN} parameter
     * has SQL type {@code INTEGER}, then the method setInt should be used
     *
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/PreparedStatement.html">PreparedStatement</a>
     */
    private static void demo2() {
        System.out.println("\ndemo2...");
        final String sql = "INSERT INTO products VALUES (NULL, ?, ?)";
        try (Connection con = DriverManager.getConnection(dbURL);
             PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, "product2");
            stmt.setDouble(2, 3);
            stmt.executeUpdate(); // no sql parameter! preparedStmt.executeUpdate(sql) is a typical error!
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * The acronym <em>CRUD</em> refers to the major operations which are implemented by databases.
     * Each letter in the acronym can be mapped to a standard SQL statement.
     *
     * @see <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>
     */
    private static void demo3() {
        System.out.println("\ndemo3...");
        final String sql = "DELETE FROM products WHERE name = ?";
        try (Connection con = DriverManager.getConnection(dbURL);
             PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, "product2");
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Interface {@link ResultSet} - a table of data representing a database result set, which is usually generated
     * by executing a statement that queries the database.
     *
     * <p>A {@code ResultSet} object maintains a cursor pointing to its current row of data. Initially the cursor
     * is positioned before the first row. The next method moves the cursor to the next row, and because it returns
     * false when there are no more rows in the {@code ResultSet} object, it can be used in a while loop to iterate
     * through the result set.
     *
     * <p>A default {@code ResultSet} object is not updatable and has a cursor that moves forward only.
     * Thus, you can iterate through it only once and only from the first row to the last row.
     * <p><i>Note</i>: it is possible to produce {@code ResultSet} objects that are scrollable and/or updatable
     *
     * <p>The {@code ResultSet} interface provides getter methods (getBoolean, getLong, and so on) for retrieving
     * column values from the current row. Values can be retrieved using either the index number of the column
     * or the name of the column. In general, using the column index will be more efficient.
     * <p><i>Note</i>: column names used as input to getter methods are case-insensitive
     *
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/ResultSet.html">ResultSet</a>
     * @see <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/javax/sql/RowSet.html>RowSet</a>
     */
    private static void demo4() {
        System.out.println("\ndemo4...");
        final String sql = "SELECT * FROM products";
        try (Connection con = DriverManager.getConnection(dbURL);
             PreparedStatement stmt = con.prepareStatement(sql)) {

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                System.out.println(id + " " + name + " " + price);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        demo1();
        demo2();
        demo3();
        demo4();
    }
}


